{"project": "kymatio", "project_url": "https://kymat.io/", "show_commit_url": "https://github.com/kymatio/kymatio/commit/", "hash_length": 8, "revision_to_hash": {"254": "d14d43e4e5b65f9cba55353673a14c9f6cd5b1a1", "255": "45956e604a90a84a7b4017ce1ef9e97178a48f40", "285": "6c1197c62ced51e0916ed098d36d402c9fdb75af", "330": "94ff3f16f1de9b51cc7b05546903e0e77ca2dbbb"}, "revision_to_date": {"254": 1545052240000, "255": 1544716257000, "285": 1547754666000, "330": 1548091961000}, "params": {"branch": ["master"]}, "graph_param_list": [], "benchmarks": {"bench_scattering1d.BenchmarkScattering1D.time_constructor": {"code": "class BenchmarkScattering1D:\n    def time_constructor(self, sc_params):\n        Scattering1D(**sc_params)\n\n    def setup(self, sc_params):\n        signal_size = int(np.prod(sc_params[\"shape\"]))\n        batch_size = SCATTERING_BENCHMARK_SIZE // signal_size\n        n_channels = 1\n        scattering = Scattering1D(**sc_params)\n        scattering.cpu()\n        x = torch.randn(\n            batch_size,\n            n_channels,\n            sc_params[\"shape\"],\n            dtype=torch.float32)\n        x.cpu()\n        self.scattering = scattering\n        self.x = x", "min_run_count": 2, "name": "bench_scattering1d.BenchmarkScattering1D.time_constructor", "number": 0, "param_names": ["sc_params"], "params": [["{'J': 8, 'Q': 1, 'shape': 1024}", "{'J': 8, 'Q': 8, 'shape': 4096}", "{'J': 16, 'Q': 12, 'shape': 131072}"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9d9fac84d7c672644f28fbb7c42b25537c39c04514d586fd9f3c4e3fda6a4aa3", "warmup_time": -1}, "bench_scattering1d.BenchmarkScattering1D.time_forward": {"code": "class BenchmarkScattering1D:\n    def time_forward(self, sc_params):\n        (self.scattering).forward(self.x)\n\n    def setup(self, sc_params):\n        signal_size = int(np.prod(sc_params[\"shape\"]))\n        batch_size = SCATTERING_BENCHMARK_SIZE // signal_size\n        n_channels = 1\n        scattering = Scattering1D(**sc_params)\n        scattering.cpu()\n        x = torch.randn(\n            batch_size,\n            n_channels,\n            sc_params[\"shape\"],\n            dtype=torch.float32)\n        x.cpu()\n        self.scattering = scattering\n        self.x = x", "min_run_count": 2, "name": "bench_scattering1d.BenchmarkScattering1D.time_forward", "number": 0, "param_names": ["sc_params"], "params": [["{'J': 8, 'Q': 1, 'shape': 1024}", "{'J': 8, 'Q': 8, 'shape': 4096}", "{'J': 16, 'Q': 12, 'shape': 131072}"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f68d1b67da7f001324846eccd534b12667077250abaab02bccf79345c67e9846", "warmup_time": -1}, "bench_scattering2d.BenchmarkScattering2D.time_constructor": {"code": "class BenchmarkScattering2D:\n    def time_constructor(self, sc_params):\n        Scattering2D(**sc_params)\n\n    def setup(self, sc_params):\n        signal_size = int(np.prod(sc_params[\"shape\"]))\n        batch_size = SCATTERING_BENCHMARK_SIZE // signal_size\n        n_channels = 1\n        scattering = Scattering2D(**sc_params)\n        scattering.cpu()\n        x = torch.randn(\n            batch_size,\n            n_channels,\n            sc_params[\"shape\"][0], sc_params[\"shape\"][1],\n            dtype=torch.float32)\n        x.cpu()\n        self.scattering = scattering\n        self.x = x", "min_run_count": 2, "name": "bench_scattering2d.BenchmarkScattering2D.time_constructor", "number": 0, "param_names": ["sc_params"], "params": [["{'J': 2, 'shape': (32, 32), 'L': 8}", "{'J': 3, 'shape': (256, 256), 'L': 8}", "{'J': 6, 'shape': (256, 256), 'L': 2}"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d45d40548e6e546d1a641b0145b2314fc18ea4e3a70a3ff60ceac8f0e8112901", "warmup_time": -1}, "bench_scattering2d.BenchmarkScattering2D.time_forward": {"code": "class BenchmarkScattering2D:\n    def time_forward(self, sc_params):\n        (self.scattering).forward(self.x)\n\n    def setup(self, sc_params):\n        signal_size = int(np.prod(sc_params[\"shape\"]))\n        batch_size = SCATTERING_BENCHMARK_SIZE // signal_size\n        n_channels = 1\n        scattering = Scattering2D(**sc_params)\n        scattering.cpu()\n        x = torch.randn(\n            batch_size,\n            n_channels,\n            sc_params[\"shape\"][0], sc_params[\"shape\"][1],\n            dtype=torch.float32)\n        x.cpu()\n        self.scattering = scattering\n        self.x = x", "min_run_count": 2, "name": "bench_scattering2d.BenchmarkScattering2D.time_forward", "number": 0, "param_names": ["sc_params"], "params": [["{'J': 2, 'shape': (32, 32), 'L': 8}", "{'J': 3, 'shape': (256, 256), 'L': 8}", "{'J': 6, 'shape': (256, 256), 'L': 2}"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "696265566ee3875b1f14ee40f2217e6f7fcee4b9f9dfe5a8ae567b7891bc53da", "warmup_time": -1}, "bench_scattering3d.BenchmarkHarmonicScattering3D.time_constructor": {"code": "class BenchmarkHarmonicScattering3D:\n    def time_constructor(self, sc_params):\n        HarmonicScattering3D(**sc_params)\n\n    def setup(self, sc_params):\n        scattering = HarmonicScattering3D(**sc_params)\n        signal_size = int(np.prod(sc_params[\"shape\"]))\n        batch_size = SCATTERING_BENCHMARK_SIZE // signal_size\n        scattering.cpu()\n        x = torch.randn(\n            batch_size,\n            sc_params[\"shape\"][0], sc_params[\"shape\"][1], sc_params[\"shape\"][2],\n            dtype=torch.float32)\n        x.cpu()\n        self.scattering = scattering\n        self.x = x", "min_run_count": 2, "name": "bench_scattering3d.BenchmarkHarmonicScattering3D.time_constructor", "number": 0, "param_names": ["sc_params"], "params": [["{'J': 2, 'shape': (32, 32, 32), 'L': 2}", "{'J': 2, 'shape': (128, 128, 128), 'L': 2}", "{'J': 6, 'shape': (128, 128, 128), 'L': 1}", "{'J': 2, 'shape': (32, 32, 32), 'L': 4}"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "fe479c21f5f6a5db128d0585280b68ba6a86f640a2664a8203d5dbbd413beca4", "warmup_time": -1}, "bench_scattering3d.BenchmarkHarmonicScattering3D.time_forward": {"code": "class BenchmarkHarmonicScattering3D:\n    def time_forward(self, sc_params):\n        (self.scattering).forward(self.x)\n\n    def setup(self, sc_params):\n        scattering = HarmonicScattering3D(**sc_params)\n        signal_size = int(np.prod(sc_params[\"shape\"]))\n        batch_size = SCATTERING_BENCHMARK_SIZE // signal_size\n        scattering.cpu()\n        x = torch.randn(\n            batch_size,\n            sc_params[\"shape\"][0], sc_params[\"shape\"][1], sc_params[\"shape\"][2],\n            dtype=torch.float32)\n        x.cpu()\n        self.scattering = scattering\n        self.x = x", "min_run_count": 2, "name": "bench_scattering3d.BenchmarkHarmonicScattering3D.time_forward", "number": 0, "param_names": ["sc_params"], "params": [["{'J': 2, 'shape': (32, 32, 32), 'L': 2}", "{'J': 2, 'shape': (128, 128, 128), 'L': 2}", "{'J': 6, 'shape': (128, 128, 128), 'L': 1}", "{'J': 2, 'shape': (32, 32, 32), 'L': 4}"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "634b47a4801c0b47774a352399f1ba50b0f77d1b5d4cec65741aac7d26e2cd9d", "warmup_time": -1}}, "machines": {"ag-clo-vl238.ad.cornell.edu": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-5557U CPU @ 3.10GHz", "machine": "ag-clo-vl238.ad.cornell.edu", "num_cpu": "4", "os": "Darwin 18.7.0", "ram": "17179869184", "version": 1}}, "tags": {"0.1": 330, "0.1-alpha": 255, "0.1-beta": 285, "0.1-branching": 254}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}